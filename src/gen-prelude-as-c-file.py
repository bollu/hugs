#!/usr/bin/env python3
# Generate the prelude.c file by scanning the folder pointed to by
# the FOLDER variable. It scans the files in FOLDER, and creates `const char *`
# variables with the file contents as strings. It also stores all the file names
# in an array `file_name` and the file contents in an array `file_contents`
import os
import glob
from os import listdir
from os.path import isfile, join


DOUBLEQUOTE = '"'
ESCAPEDOUBLEQUOTE = "\\" + DOUBLEQUOTE
SLASH = "\\"
ESCAPESLASH = "\\\\"
NEWLINE = '\\n'
FOLDER = "../hugsdir/libraries/"; GLOBPATH=FOLDER + "**/*.hs"
OUTFILE = "AUTOGENERATED_PRELUDE.h"

out = open(OUTFILE, "w")
out.write("#pragma once\n")
out.write("#ifndef AUTOGENERATED_PRELUDE\n#define AUTOGENERATED_PRELUDE")

class FileMetadata: 
    def __init__(self, path):
        self.path = path;

fms = [] # contains FileMetadatas
for path in glob.glob(GLOBPATH, recursive=True):
    print("path: %80s" % (path, ))
    if not isfile(path): continue
    fms.append(FileMetadata(path))


def escape(s): return s.replace(SLASH, ESCAPESLASH).replace(DOUBLEQUOTE, ESCAPEDOUBLEQUOTE)

def filepath_to_c_var(path): return path.split(FOLDER)[1].replace("/", "_").split(".hs")[0]

for fm in fms:
    f = open(fm.path, "r")
    ls = [DOUBLEQUOTE + escape(l.replace("\n", "")) + NEWLINE + DOUBLEQUOTE for l in f.readlines()]
    f.close()

    out.write("\nconst char *" + filepath_to_c_var(fm.path) + " = " + \
              "\n".join(ls) + ";")

out.write("\nconst int N_PRELUDE_FILES = " + str(len(fms)) + ";\n")

out.write("\nconst char *prelude_paths[] = {\n" + \
          "\n, ".join([DOUBLEQUOTE + escape(fm.path.split(FOLDER)[1]) + DOUBLEQUOTE for fm in fms]) + \
          "\n};\n")


# write prelude_contents array and its initializer.
out.write("\nconst char *prelude_contents[" + str(len(fms)) + "];\n")
out.write("__attribute__((constructor)) void initialize_prelude_contents() {\n")
for i, fm in enumerate(fms):
    out.write("\tprelude_contents[" + str(i) + "] = " + \
            filepath_to_c_var(fm.path) + ";\n")
out.write("}\n");

out.write("#endif")
out.close()
